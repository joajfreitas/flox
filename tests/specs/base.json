[
  {
    "name": "Constants",
    "tests": [
      {
        "name": "Numeric constant",
        "input": "1",
        "output": "1.0"
      },
      {
        "name": "Nil",
        "input": "nil",
        "output": "nil"
      },
      {
        "name": "True",
        "input": "true",
        "output": "true"
      },
      {
        "name": "False",
        "input": "false",
        "output": "false"
      },
      {
        "name": "String constant",
        "input": "\"1\"",
        "output": "1",
        "enabled": false
      }
    ]
  },
  {
    "name": "Base functions",
    "tests": [
      {
        "name": "Add",
        "input": "(+ 1 1)",
        "output": "2.0"
      },
      {
        "name": "Sub",
        "input": "(- 1 1)",
        "output": "0.0"
      },
      {
        "name": "Mul",
        "input": "(* 1 1)",
        "output": "1.0"
      },
      {
        "name": "Div",
        "input": "(/ 1 1)",
        "output": "1.0"
      },
      {
        "name": "Not",
        "input": "(not true)",
        "output": "false"
      },
      {
        "name": "Eq",
        "input": "(= 1 1)",
        "output": "true"
      },
      {
        "name": "Ne",
        "input": "(!= 1 1)",
        "output": "false"
      },
      {
        "name": "Bt",
        "input": "(> 2 1)",
        "output": "true"
      },
      {
        "name": "Lt",
        "input": "(< 0 1)",
        "output": "true"
      },
      {
        "name": "Be",
        "input": "(>= 2 1)",
        "output": "true"
      },
      {
        "name": "Le",
        "input": "(<= 0 1)",
        "output": "true"
      },
      {
        "name": "And",
        "input": "(and true false)",
        "output": "false"
      },
      {
        "name": "Nand",
        "input": "(nand false false)",
        "output": "true"
      },
      {
        "name": "Or",
        "input": "(or true false)",
        "output": "true"
      },
      {
        "name": "Nor",
        "input": "(nor true false)",
        "output": "false"
      },
      {
        "name": "Xor",
        "input": "(xor true false)",
        "output": "true"
      },
      {
        "name": "Xnor",
        "input": "(xnor true false)",
        "output": "false"
      }
    ]
  },
  {
    "name": "If",
    "tests": [
      {
        "name": "If case 1",
        "input": "(if (= 1 2) 1 2)",
        "output": "2.0"
      },
      {
        "name": "If case 2",
        "input": "(if (= 1 1) \"ola\" \"adeus\")",
        "output": "ola",
        "enabled": false
      }
    ]
  },
  {
    "name": "Do",
    "tests": [
      {
        "name": "Do case 1",
        "input": "(do (+ 1 2) (- 3 2))",
        "output": "1.0"
      },
      {
        "name": "Do case 1",
        "input": "(do \"ola\" \"adeus\")",
        "output": "adeus"
      }
    ]
  },
  {
    "name": "Functions",
    "tests": [
      {
        "name": "lambda1",
        "input": "(do (set! f (lambda (x) (+ x 1))) (f 0))",
        "output": "1.0"
      },
      {
        "name": "lambda2",
        "input": "(do (set! f (lambda (x y) (+ x (* 2 y)))) (f 1 1))",
        "output": "3.0"
      },
      {
        "name": "lambda3",
        "input": "(do (set! f (lambda (x y z) (+ x (+ (* 2 y) (* 3 y))))) (f 1 1 1))",
        "output": "6.0"
      },
      {
        "name": "repeat-call",
        "input": "(do (set! f (lambda (x) (+ x 1))) (f 1) (f 2))",
        "output": "3.0"
      },
      {
        "name": "recursion",
        "input": "((do (defun f (x) (if (= x 0) 0 (+ x (f (- x 1))))) (f 2)))",
        "output": "3.0",
        "enabled": false
      }
    ]
  },
  {
    "name": "Captures",
    "tests": [
      {
        "name": "capture",
        "input": "(do (set! f (lambda (x) (lambda (y) (+ x y)))) (f 1))",
        "output": "",
        "enabled": false
      }
    ]
  }
]
